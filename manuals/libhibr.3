.Dd January 19, 2014
.Dt libhibr 3
.Os libhibr
.Sh NAME
.Nm libhibr.h
.Nd Library to access the Windows Hibernation File (hiberfil.sys) format
.Sh LIBRARY
.Lb libhibr
.Sh SYNOPSIS
.In libhibr.h
.Pp
Support functions
.Ft const char *
.Fn libhibr_get_version "void"
.Ft int
.Fn libhibr_get_access_flags_read "void"
.Ft int
.Fn libhibr_get_access_flags_read_write "void"
.Ft int
.Fn libhibr_get_access_flags_write "void"
.Ft int
.Fn libhibr_get_codepage "int *codepage, libhibr_error_t **error"
.Ft int
.Fn libhibr_set_codepage "int codepage, libhibr_error_t **error"
.Ft int
.Fn libhibr_check_file_signature "const char *filename, libhibr_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libhibr_check_file_signature_wide "const wchar_t *filename, libhibr_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libhibr_check_file_signature_file_io_handle "libbfio_handle_t *bfio_handle, libhibr_error_t **error"
.Pp
Notify functions
.Ft void
.Fn libhibr_notify_set_verbose "int verbose"
.Ft int
.Fn libhibr_notify_set_stream "FILE *stream, libhibr_error_t **error"
.Ft int
.Fn libhibr_notify_stream_open "const char *filename, libhibr_error_t **error"
.Ft int
.Fn libhibr_notify_stream_close "libhibr_error_t **error"
.Pp
Error functions
.Ft void 
.Fn libhibr_error_free "libhibr_error_t **error"
.Ft int
.Fn libhibr_error_fprint "libhibr_error_t *error, FILE *stream"
.Ft int
.Fn libhibr_error_sprint "libhibr_error_t *error, char *string, size_t size"
.Ft int 
.Fn libhibr_error_backtrace_fprint "libhibr_error_t *error, FILE *stream"
.Ft int
.Fn libhibr_error_backtrace_sprint "libhibr_error_t *error, char *string, size_t size"
.Pp
File functions
.Ft int
.Fn libhibr_file_initialize "libhibr_file_t **file, libhibr_error_t **error"
.Ft int
.Fn libhibr_file_free "libhibr_file_t **file, libhibr_error_t **error"
.Ft int
.Fn libhibr_file_signal_abort "libhibr_file_t *file, libhibr_error_t **error"
.Ft int
.Fn libhibr_file_open "libhibr_file_t *file, const char *filename, int access_flags, libhibr_error_t **error"
.Ft int
.Fn libhibr_file_close "libhibr_file_t *file, libhibr_error_t **error"
.Ft ssize_t
.Fn libhibr_file_read_buffer "libhibr_file_t *file, void *buffer, size_t buffer_size, libhibr_error_t **error"
.Ft ssize_t
.Fn libhibr_file_read_random "libhibr_file_t *file, void *buffer, size_t buffer_size, off64_t offset, libhibr_error_t **error"
.Ft off64_t
.Fn libhibr_file_seek_offset "libhibr_file_t *file, off64_t offset, int whence, libhibr_error_t **error"
.Ft off64_t
.Fn libhibr_file_get_offset "libhibr_file_t *file, libhibr_error_t **error"
.Ft int
.Fn libhibr_file_get_version "libhibr_file_t *file, uint32_t *version, libhibr_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn libhibr_file_open_wide "libhibr_file_t *file, const wchar_t *filename, int access_flags, libhibr_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn libhibr_file_open_file_io_handle "libhibr_file_t *file, libbfio_handle_t *file_io_handle, int access_flags, libhibr_error_t **error"
.Pp
Meta data functions
.Ft int
.Fn libhibr_file_get_media_size "libhibr_file_t *file, size64_t *media_size, libhibr_error_t **error"
.Sh DESCRIPTION
The
.Fn libhibr_get_version
function is used to retrieve the library version.
.Sh RETURN VALUES
Most of the functions return NULL or -1 on error, dependent on the return type. For the actual return values refer to libhibr.h
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh NOTES
libhibr uses mainly UTF-8 encoded strings except for filenames, but provides several UTF-16 functions.

ASCII strings in a EDB file contain an extended ASCII string using the codepage of the system it was created on. The function
.Ar libhibr_set_ascii_codepage
 allows to set the required codepage for reading and writing. The default codepage is ASCII and replaces all extended characters to the Unicode replacement character (U+fffd) when reading and the ASCII substitude character (0x1a) when writing.

libhibr allows to be compiled with wide character support.
To compile libhibr with wide character support use
.Ar ./configure --enable-wide-character-type=yes
or pass the definition
.Ar HAVE_WIDE_CHARACTER_TYPE
 to the compiler (i.e. in case of Microsoft Visual Studio (MSVS) C++).

To have other code to determine if libhibr was compiled with wide character support it defines
.Ar LIBHIBR_HAVE_WIDE_CHARACTER_TYPE
 in libhibr/features.h.

libhibr allows to be compiled with chained IO support using libbfio.
libhibr will automatically detect if a compatible version of libbfio is available.

To have other code to determine if libhibr was compiled with libbfio support it defines
.Ar LIBHIBR_HAVE_BFIO
 in libhibr/features.h.

.Sh BUGS
Please report bugs of any kind to <joachim.metz@gmail.com> or on the project website:
http://code.google.com/p/libhibr/
.Sh AUTHOR
These man pages were written by Joachim Metz.
.Sh COPYRIGHT
Copyright 2012-2014, Joachim Metz <joachim.metz@gmail.com>.
.Sh SEE ALSO
the libhibr.h include file
